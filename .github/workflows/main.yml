name: main

on: [ push ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9' ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.1.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load dependency cache
        id: dependency-cache
        uses: actions/cache@v2
        with:
          path: .venv/
          key: venv-v0-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest --cov=alchemista/ --cov-report=xml --verbose tests/

      - uses: codecov/codecov-action@v1
        if: matrix.python-version == '3.8'
        with:
          fail_ci_if_error: true
          files: coverage.xml
          flags: python,unittests

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Poetry
        uses: snok/install-poetry@v1.1.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load dependency cache
        id: dependency-cache
        uses: actions/cache@v2
        with:
          path: .venv/
          key: venv-v0-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Black
        if: always()
        run: poetry run black --check --verbose alchemista/ examples/ tests/

      - name: isort
        if: always()
        run: poetry run isort --check-only --verbose .

      - name: Mypy
        if: always()
        run: poetry run mypy --verbose alchemista/ examples/ tests/

      - name: Pylint
        if: always()
        run: poetry run pylint --verbose alchemista/ examples/ tests/
